{"version":3,"sources":["components/views/LoginPage/LoginPage.js"],"names":["withRouter","props","dispatch","useDispatch","rememberMeChecked","localStorage","getItem","_useState","useState","_useState2","Object","C_Users_Admin_Desktop_moviedb_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","formErrorMessage","setFormErrorMessage","_useState3","_useState4","rememberMe","setRememberMe","handleRememberMe","initialEmail","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","formik__WEBPACK_IMPORTED_MODULE_4__","initialValues","email","password","validationSchema","Yup","shape","required","min","onSubmit","values","_ref","setSubmitting","setTimeout","dataToSubmit","loginUser","then","response","payload","loginSuccess","window","setItem","userId","id","removeItem","history","push","catch","err","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit","react_bootstrap_Container__WEBPACK_IMPORTED_MODULE_9__","fluid","react_bootstrap_Row__WEBPACK_IMPORTED_MODULE_11__","className","style","height","display","alignItems","react_bootstrap_Form__WEBPACK_IMPORTED_MODULE_10__","width","padding","Group","for","antd__WEBPACK_IMPORTED_MODULE_6__","type","color","Control","placeholder","value","onChange","onBlur","fontSize","border","borderRadius","antd__WEBPACK_IMPORTED_MODULE_7__","checked","href","float","react_bootstrap_Button__WEBPACK_IMPORTED_MODULE_12__","htmlType","minWidth","disabled"],"mappings":"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","file":"static/js/12.5fd80b7e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { loginUser } from \"../../../_actions/user_actions\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Icon, Checkbox } from \"antd\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nfunction LoginPage(props) {\r\n  const dispatch = useDispatch();\r\n  const rememberMeChecked = localStorage.getItem(\"rememberMe\") ? true : false;\r\n\r\n  const [formErrorMessage, setFormErrorMessage] = useState(\"\");\r\n  const [rememberMe, setRememberMe] = useState(rememberMeChecked);\r\n\r\n  const handleRememberMe = () => {\r\n    setRememberMe(!rememberMe);\r\n  };\r\n\r\n  const initialEmail = localStorage.getItem(\"rememberMe\")\r\n    ? localStorage.getItem(\"rememberMe\")\r\n    : \"\";\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        email: initialEmail,\r\n        password: \"\",\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        email: Yup.string()\r\n          .email(\"Email is invalid\")\r\n          .required(\"Email is required\"),\r\n        password: Yup.string()\r\n          .min(6, \"Password must be at least 6 characters\")\r\n          .required(\"Password is required\"),\r\n      })}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        setTimeout(() => {\r\n          let dataToSubmit = {\r\n            email: values.email,\r\n            password: values.password,\r\n          };\r\n\r\n          dispatch(loginUser(dataToSubmit))\r\n            .then((response) => {\r\n              if (response.payload.loginSuccess) {\r\n                window.localStorage.setItem(\"userId\", response.payload.userId);\r\n                if (rememberMe === true) {\r\n                  window.localStorage.setItem(\"rememberMe\", values.id);\r\n                } else {\r\n                  localStorage.removeItem(\"rememberMe\");\r\n                }\r\n                props.history.push(\"/\");\r\n              } else {\r\n                setFormErrorMessage(\"Check out your Account or Password again\");\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              setFormErrorMessage(\"Check out your Account or Password again\");\r\n              setTimeout(() => {\r\n                setFormErrorMessage(\"\");\r\n              }, 3000);\r\n            });\r\n          setSubmitting(false);\r\n        }, 500);\r\n      }}\r\n    >\r\n      {(props) => {\r\n        const {\r\n          values,\r\n          touched,\r\n          errors,\r\n          isSubmitting,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n        } = props;\r\n        return (\r\n          <Container fluid>\r\n            <Row\r\n              className=\"justify-content-center\"\r\n              style={{ height: \"80vh \", display: \"flex\", alignItems: \"center\" }}\r\n            >\r\n              <Form\r\n                onSubmit={handleSubmit}\r\n                style={{ width: \"350px\", padding: \"1rem\" }}\r\n              >\r\n                <h3>Log In</h3>\r\n                <Form.Group required>\r\n                  <label for=\"email\">\r\n                    <Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />{\" \"}\r\n                    Email\r\n                  </label>\r\n                  <Form.Control\r\n                    id=\"email\"\r\n                    placeholder=\"Enter your email\"\r\n                    type=\"email\"\r\n                    value={values.email}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    className={\r\n                      errors.email && touched.email\r\n                        ? \"text-input error\"\r\n                        : \"text-input\"\r\n                    }\r\n                  />\r\n                  {errors.email && touched.email && (\r\n                    <div className=\"input-feedback\">{errors.email}</div>\r\n                  )}\r\n                </Form.Group>\r\n\r\n                <Form.Group required>\r\n                  <label for=\"password\">\r\n                    <Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }} />{\" \"}\r\n                    Password\r\n                  </label>\r\n                  <Form.Control\r\n                    id=\"password\"\r\n                    placeholder=\"Enter your password\"\r\n                    type=\"password\"\r\n                    value={values.password}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    className={\r\n                      errors.password && touched.password\r\n                        ? \"text-input error\"\r\n                        : \"text-input\"\r\n                    }\r\n                  />\r\n                  {errors.password && touched.password && (\r\n                    <div className=\"input-feedback\">{errors.password}</div>\r\n                  )}\r\n                </Form.Group>\r\n\r\n                {formErrorMessage && (\r\n                  <label>\r\n                    <p\r\n                      style={{\r\n                        color: \"#ff0000bf\",\r\n                        fontSize: \"0.7rem\",\r\n                        border: \"1px solid\",\r\n                        padding: \"1rem\",\r\n                        borderRadius: \"10px\",\r\n                      }}\r\n                    >\r\n                      {formErrorMessage}\r\n                    </p>\r\n                  </label>\r\n                )}\r\n\r\n                <Form.Group>\r\n                  <Checkbox\r\n                    id=\"rememberMe\"\r\n                    onChange={handleRememberMe}\r\n                    checked={rememberMe}\r\n                  >\r\n                    {\" \"}\r\n                    Remember me\r\n                  </Checkbox>\r\n                  <a\r\n                    className=\"login-form-forgot\"\r\n                    href=\"/reset_user\"\r\n                    style={{ float: \"right\" }}\r\n                  >\r\n                    forgot password\r\n                  </a>\r\n                  <div>\r\n                    <Button\r\n                      type=\"primary\"\r\n                      htmlType=\"submit\"\r\n                      className=\"login-form-button\"\r\n                      style={{ minWidth: \"100%\" }}\r\n                      disabled={isSubmitting}\r\n                      onSubmit={handleSubmit}\r\n                    >\r\n                      Log in\r\n                    </Button>\r\n                  </div>\r\n                  Or <a href=\"/register\">register now!</a>\r\n                </Form.Group>\r\n              </Form>\r\n            </Row>\r\n          </Container>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default withRouter(LoginPage);\r\n"],"sourceRoot":""}