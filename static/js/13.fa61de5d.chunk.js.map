{"version":3,"sources":["components/views/RegisterPage/RegisterPage.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","moment__WEBPACK_IMPORTED_MODULE_1__","moment__WEBPACK_IMPORTED_MODULE_1___default","formik__WEBPACK_IMPORTED_MODULE_2__","yup__WEBPACK_IMPORTED_MODULE_3__","_actions_user_actions__WEBPACK_IMPORTED_MODULE_4__","react_redux__WEBPACK_IMPORTED_MODULE_5__","react_bootstrap_Container__WEBPACK_IMPORTED_MODULE_6__","react_bootstrap_Form__WEBPACK_IMPORTED_MODULE_7__","react_bootstrap_Row__WEBPACK_IMPORTED_MODULE_8__","react_bootstrap_Button__WEBPACK_IMPORTED_MODULE_9__","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","RegisterPage","props","dispatch","useDispatch","a","createElement","initialValues","email","lastName","name","password","confirmPassword","validationSchema","Yup","shape","required","min","oneOf","onSubmit","values","_ref","setSubmitting","setTimeout","dataToSubmit","lastname","image","concat","moment","unix","registerUser","then","response","payload","success","history","push","alert","err","errmsg","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit","fluid","className","style","height","display","alignItems","Object","assign","width","padding","Group","for","Control","id","placeholder","type","value","onChange","onBlur","label","hasFeedback","validateStatus","onClick","disabled","minWidth"],"mappings":"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","file":"static/js/13.fa61de5d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport moment from \"moment\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { registerUser } from \"../../../_actions/user_actions\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 8 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 16 },\r\n  },\r\n};\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n      offset: 8,\r\n    },\r\n  },\r\n};\r\n\r\nfunction RegisterPage(props) {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        email: \"\",\r\n        lastName: \"\",\r\n        name: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        name: Yup.string().required(\"Name is required\"),\r\n        lastName: Yup.string().required(\"Last Name is required\"),\r\n        email: Yup.string()\r\n          .email(\"Email is invalid\")\r\n          .required(\"Email is required\"),\r\n        password: Yup.string()\r\n          .min(6, \"Password must be at least 6 characters\")\r\n          .required(\"Password is required\"),\r\n        confirmPassword: Yup.string()\r\n          .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\r\n          .required(\"Confirm Password is required\"),\r\n      })}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        setTimeout(() => {\r\n          let dataToSubmit = {\r\n            email: values.email,\r\n            password: values.password,\r\n            name: values.name,\r\n            lastname: values.lastname,\r\n            image: `http://gravatar.com/avatar/${moment().unix()}?d=identicon`,\r\n          };\r\n\r\n          dispatch(registerUser(dataToSubmit)).then((response) => {\r\n            if (response.payload.success) {\r\n              props.history.push(\"/login\");\r\n            } else {\r\n              alert(response.payload.err.errmsg);\r\n            }\r\n          });\r\n\r\n          setSubmitting(false);\r\n        }, 500);\r\n      }}\r\n    >\r\n      {(props) => {\r\n        const {\r\n          values,\r\n          touched,\r\n          errors,\r\n          isSubmitting,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n        } = props;\r\n        return (\r\n          <Container fluid>\r\n            <Row\r\n              className=\"justify-content-center\"\r\n              style={{ height: \"80vh \", display: \"flex\", alignItems: \"center\" }}\r\n            >\r\n              <Form\r\n                style={{ width: \"375px\", padding: \"1rem\" }}\r\n                {...formItemLayout}\r\n                onSubmit={handleSubmit}\r\n              >\r\n                <h2>Sign up</h2>\r\n                <Form.Group required>\r\n                  <label for=\"name\">Name</label>\r\n                  <Form.Control\r\n                    id=\"name\"\r\n                    placeholder=\"Enter your name\"\r\n                    type=\"text\"\r\n                    value={values.name}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    className={\r\n                      errors.name && touched.name\r\n                        ? \"text-input error\"\r\n                        : \"text-input\"\r\n                    }\r\n                  />\r\n                  {errors.name && touched.name && (\r\n                    <div className=\"input-feedback\">{errors.name}</div>\r\n                  )}\r\n                </Form.Group>\r\n\r\n                <Form.Group required label=\"Last Name\">\r\n                  {\" \"}\r\n                  <label for=\"lastName\">LastName</label>\r\n                  <Form.Control\r\n                    id=\"lastName\"\r\n                    placeholder=\"Enter your Last Name\"\r\n                    type=\"text\"\r\n                    value={values.lastName}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    className={\r\n                      errors.lastName && touched.lastName\r\n                        ? \"text-input error\"\r\n                        : \"text-input\"\r\n                    }\r\n                  />\r\n                  {errors.lastName && touched.lastName && (\r\n                    <div className=\"input-feedback\">{errors.lastName}</div>\r\n                  )}\r\n                </Form.Group>\r\n\r\n                <Form.Group\r\n                  required\r\n                  hasFeedback\r\n                  validateStatus={\r\n                    errors.email && touched.email ? \"error\" : \"success\"\r\n                  }\r\n                >\r\n                  {\" \"}\r\n                  <label for=\"email\">Email</label>\r\n                  <Form.Control\r\n                    id=\"email\"\r\n                    placeholder=\"Enter your Email\"\r\n                    type=\"email\"\r\n                    value={values.email}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    className={\r\n                      errors.email && touched.email\r\n                        ? \"text-input error\"\r\n                        : \"text-input\"\r\n                    }\r\n                  />\r\n                  {errors.email && touched.email && (\r\n                    <div className=\"input-feedback\">{errors.email}</div>\r\n                  )}\r\n                </Form.Group>\r\n\r\n                <Form.Group\r\n                  required\r\n                  hasFeedback\r\n                  validateStatus={\r\n                    errors.password && touched.password ? \"error\" : \"success\"\r\n                  }\r\n                >\r\n                  {\" \"}\r\n                  <label for=\"password\">Password</label>\r\n                  <Form.Control\r\n                    id=\"password\"\r\n                    placeholder=\"Enter your password\"\r\n                    type=\"password\"\r\n                    value={values.password}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    className={\r\n                      errors.password && touched.password\r\n                        ? \"text-input error\"\r\n                        : \"text-input\"\r\n                    }\r\n                  />\r\n                  {errors.password && touched.password && (\r\n                    <div className=\"input-feedback\">{errors.password}</div>\r\n                  )}\r\n                </Form.Group>\r\n\r\n                <Form.Group required label=\"Confirm\" hasFeedback>\r\n                  {\" \"}\r\n                  <label for=\"confirmPassword\">Confirm Password</label>{\" \"}\r\n                  <Form.Control\r\n                    id=\"confirmPassword\"\r\n                    placeholder=\"Enter your confirmPassword\"\r\n                    type=\"password\"\r\n                    value={values.confirmPassword}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    className={\r\n                      errors.confirmPassword && touched.confirmPassword\r\n                        ? \"text-input error\"\r\n                        : \"text-input\"\r\n                    }\r\n                  />\r\n                  {errors.confirmPassword && touched.confirmPassword && (\r\n                    <div className=\"input-feedback\">\r\n                      {errors.confirmPassword}\r\n                    </div>\r\n                  )}\r\n                </Form.Group>\r\n\r\n                <Form.Group {...tailFormItemLayout}>\r\n                  <Button\r\n                    onClick={handleSubmit}\r\n                    type=\"primary\"\r\n                    disabled={isSubmitting}\r\n                    style={{ minWidth: \"100%\" }}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </Form.Group>\r\n              </Form>\r\n            </Row>\r\n          </Container>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default RegisterPage;\r\n"],"sourceRoot":""}